# METADATA
# title :"SSM Managed Instances"
# description: "Ensure that all Amazon EC2 instances are managed by AWS Systems Manager (SSM)."
# scope: package
# schemas:
# - input: schema.input
# related_resources:
# - https://docs.aws.amazon.com/systems-manager/latest/userguide/managed_instances.html
# custom:
#   avd_id: AVD-AWS-0180
#   provider: aws
#   service:EC2
#   severity: LOW
#   short_code: ssm-managed-instan 
#   recommended_action: "Configure AWS EC2 instance as SSM Managed Instances"
#   input:
#     selector:
#      - type: cloud
package builtin.aws.rds.aws0180

#function(cache, settings, callback) {
#        var results = [];
#        var source = {};
#        var regions = helpers.regions(settings);
#        var awsOrGov = helpers.defaultPartition(settings);
#
#        var acctRegion = helpers.defaultRegion(settings);
#        var accountId = helpers.addSource(cache, source, ['sts', 'getCallerIdentity', acctRegion, 'data']);
#
#        async.each(regions.ssm, function(region, rcb){
#            var describeInstances = helpers.addSource(cache, source,
#                ['ec2', 'describeInstances', region]);
#
#            if (!describeInstances) return rcb();
#
#            if (!describeInstances.data || describeInstances.err) {
#                helpers.addResult(results, 3, 'Unable to query for EC2 instances: ' + helpers.addError(describeInstances), region);
#                return rcb();
#            }
#
#            let ec2Instances = describeInstances.data.map((reservation) => reservation.Instances).flat();
#
#            if (!ec2Instances.length) {
#                helpers.addResult(results, 0, 'No EC2 instances found', region);
#                return rcb();
#            }
#
#            var describeInstanceInformation = helpers.addSource(cache, source,
#                ['ssm', 'describeInstanceInformation', region]);
#
#            if (!describeInstanceInformation || describeInstanceInformation.err || !describeInstanceInformation.data) {
#                helpers.addResult(results, 3,
#                    'Unable to query instance information: ' + helpers.addError(describeInstanceInformation), region);
#                return rcb();
#            }
#
#            for (let ec2Instance of ec2Instances) {
#                const arn = `arn:${awsOrGov}:ec2:${region}:${accountId}:instance/${ec2Instance.InstanceId}`;
#
#                let instanceInfo = describeInstanceInformation.data.find((instanceInfo) => instanceInfo.InstanceId && instanceInfo.InstanceId === ec2Instance.InstanceId);
#
#                if (instanceInfo) {
#                    helpers.addResult(results, 0, `EC2 Instance: ${ec2Instance.InstanceId} is managed by AWS Systems Manager`, region, arn);
#                } else {
#                    helpers.addResult(results, 2, `EC2 Instance: ${ec2Instance.InstanceId} is not managed by AWS Systems Manager`, region, arn);
#                }
#            }
#
#            rcb();
#        }, function(){
#            callback(null, results, source);
#        });
#    }